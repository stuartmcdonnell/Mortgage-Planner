/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mortgageplanner;

import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableColumn;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author stuartmcdonnell
 */
public class ListRenewals extends javax.swing.JFrame {

    int selCol;
    int selRow;
    boolean all;

    public ListRenewals(boolean all_) {
        initComponents();
        this.all=all_;
        this.getData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        CTable = new javax.swing.JTable();
        contactBtn = new javax.swing.JButton();
        markContactedButton = new javax.swing.JButton();
        markContactedButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clients Due For Renewal");

        CTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Client ID", "Forename", "Surname", "Renewal Date", "Children", "E-Mail", "Telephone", "Address", "Clients"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        CTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CTable);

        contactBtn.setText("Contact");
        contactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactBtnActionPerformed(evt);
            }
        });

        markContactedButton.setText("Mark as Contacted");
        markContactedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markContactedButtonActionPerformed(evt);
            }
        });

        markContactedButton1.setText("Mark as Contacted");
        markContactedButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markContactedButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(markContactedButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(298, 298, 298)
                    .addComponent(markContactedButton)
                    .addContainerGap(298, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(contactBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(markContactedButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(210, 210, 210)
                    .addComponent(markContactedButton, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addGap(210, 210, 210)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void contactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactBtnActionPerformed
        Desktop desktop;
        if (Desktop.isDesktopSupported()
                && (desktop = Desktop.getDesktop()).isSupported(Desktop.Action.MAIL)) {
            try {
                String email = CTable.getValueAt(selRow, 5).toString();
                System.out.println(email);
                URI mailto = new URI("mailto:"+email+"?subject=Mortgage%20Renewal");
                desktop.mail(mailto);
            } catch (URISyntaxException | IOException ex) {
                Logger.getLogger(ListRenewals.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            throw new RuntimeException("desktop doesn't support mailto; mail is dead anyway ;)");
        }
    }//GEN-LAST:event_contactBtnActionPerformed

    private void CTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CTableMouseClicked
        selCol = CTable.getSelectedColumn();
        selRow = CTable.getSelectedRow();
    }//GEN-LAST:event_CTableMouseClicked

    private void markContactedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markContactedButtonActionPerformed
        Statement stmt = null;
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:mplanner.db");
            stmt = connection.createStatement();
            String sql = ("UPDATE clients SET contacted = 'true' WHERE clientid ="+CTable.getValueAt(selRow, 0));
            stmt.executeUpdate(sql);
            connection.close();
            this.getData();
        } catch (SQLException ex) {
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_markContactedButtonActionPerformed

    private void markContactedButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markContactedButton1ActionPerformed
        Statement stmt = null;
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:mplanner.db");
            stmt = connection.createStatement();
            String sql = ("UPDATE clients SET contacted = 'true' WHERE clientid =" + CTable.getValueAt(selRow, 0));
            stmt.executeUpdate(sql);
            connection.close();
            this.getData();
        } catch (SQLException ex) {
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_markContactedButton1ActionPerformed


    /* Create and display the form */
    public void run() {
        if(this.all){
            new ListRenewals(true).setVisible(true);
        }else{
            new ListRenewals(false).setVisible(true);
        }
    }

    private void getData() {

        Statement stmt = null;
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:mplanner.db");
            stmt = connection.createStatement();
            String sql;
            
            if(this.all==true){
                sql = "SELECT * FROM clients WHERE mDate BETWEEN date('now') AND date('now', '+3 months');";
            }else{
                sql = "SELECT * FROM clients WHERE mDate BETWEEN date('now') AND date('now', '+3 months') AND contacted='false';";
            }
            
            ResultSet rs = stmt.executeQuery(sql);

            CTable.setModel(DbUtils.resultSetToTableModel(rs));

            rs.close();
            connection.close();

            String headers[] = {"Client ID", "Forename", "Surname", "Renewal Date", "Children", "E-Mail", "Telephone", "Address", "Contacted"};

            for (int i = 0; i < CTable.getColumnCount(); i++) {
                TableColumn c = CTable.getTableHeader().getColumnModel().getColumn(i);
                c.setHeaderValue(headers[i]);
            }

        } catch (SQLException ex) {
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CTable;
    private javax.swing.JButton contactBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton markContactedButton;
    private javax.swing.JButton markContactedButton1;
    // End of variables declaration//GEN-END:variables
}
